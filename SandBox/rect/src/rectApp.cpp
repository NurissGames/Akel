#include <Akel.h>
#include <Akel_main.h>

class FPSprinterComponent : public Ak::Component
{
    public:
        void update() override { std::cout << "fps : " << Ak::CounterFPS::getFPS() << " - ticks : " << Ak::CounterFPS::getTicks() << '\r' << std::flush; }
};

const std::vector<uint32_t> vertex_shader = {
	0x07230203,0x00010000,0x0008000a,0x0000001e,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000a,0x0000000f,0x0000001a,
	0x0000001c,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00060005,0x00000008,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000008,
	0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000000a,0x00000000,0x00050005,
	0x0000000f,0x6f506e69,0x69746973,0x00006e6f,0x00050005,0x0000001a,0x67617266,0x6f6c6f43,
	0x00000072,0x00040005,0x0000001c,0x6f436e69,0x00726f6c,0x00050048,0x00000008,0x00000000,
	0x0000000b,0x00000000,0x00030047,0x00000008,0x00000002,0x00040047,0x0000000f,0x0000001e,
	0x00000000,0x00040047,0x0000001a,0x0000001e,0x00000000,0x00040047,0x0000001c,0x0000001e,
	0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x0003001e,0x00000008,0x00000007,
	0x00040020,0x00000009,0x00000003,0x00000008,0x0004003b,0x00000009,0x0000000a,0x00000003,
	0x00040015,0x0000000b,0x00000020,0x00000001,0x0004002b,0x0000000b,0x0000000c,0x00000000,
	0x00040017,0x0000000d,0x00000006,0x00000002,0x00040020,0x0000000e,0x00000001,0x0000000d,
	0x0004003b,0x0000000e,0x0000000f,0x00000001,0x0004002b,0x00000006,0x00000011,0x00000000,
	0x0004002b,0x00000006,0x00000012,0x3f800000,0x00040020,0x00000016,0x00000003,0x00000007,
	0x00040017,0x00000018,0x00000006,0x00000003,0x00040020,0x00000019,0x00000003,0x00000018,
	0x0004003b,0x00000019,0x0000001a,0x00000003,0x00040020,0x0000001b,0x00000001,0x00000018,
	0x0004003b,0x0000001b,0x0000001c,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,
	0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000d,0x00000010,0x0000000f,0x00050051,
	0x00000006,0x00000013,0x00000010,0x00000000,0x00050051,0x00000006,0x00000014,0x00000010,
	0x00000001,0x00070050,0x00000007,0x00000015,0x00000013,0x00000014,0x00000011,0x00000012,
	0x00050041,0x00000016,0x00000017,0x0000000a,0x0000000c,0x0003003e,0x00000017,0x00000015,
	0x0004003d,0x00000018,0x0000001d,0x0000001c,0x0003003e,0x0000001a,0x0000001d,0x000100fd,
	0x00010038
};

const std::vector<uint32_t> fragment_shader = {
	0x07230203,0x00010000,0x0008000a,0x00000013,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000c,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00090004,0x415f4c47,0x735f4252,
	0x72617065,0x5f657461,0x64616873,0x6f5f7265,0x63656a62,0x00007374,0x00040005,0x00000004,
	0x6e69616d,0x00000000,0x00050005,0x00000009,0x4374756f,0x726f6c6f,0x00000000,0x00050005,
	0x0000000c,0x67617266,0x6f6c6f43,0x00000072,0x00040047,0x00000009,0x0000001e,0x00000000,
	0x00040047,0x0000000c,0x0000001e,0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,
	0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,
	0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,
	0x00040017,0x0000000a,0x00000006,0x00000003,0x00040020,0x0000000b,0x00000001,0x0000000a,
	0x0004003b,0x0000000b,0x0000000c,0x00000001,0x0004002b,0x00000006,0x0000000e,0x3f800000,
	0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,
	0x0000000a,0x0000000d,0x0000000c,0x00050051,0x00000006,0x0000000f,0x0000000d,0x00000000,
	0x00050051,0x00000006,0x00000010,0x0000000d,0x00000001,0x00050051,0x00000006,0x00000011,
	0x0000000d,0x00000002,0x00070050,0x00000007,0x00000012,0x0000000f,0x00000010,0x00000011,
	0x0000000e,0x0003003e,0x00000009,0x00000012,0x000100fd,0x00010038
};

class Rect : public Ak::Application
{
    public:
        Rect() : Ak::Application()
        {
            Ak::WindowComponent* window = Ak::memAlloc<Ak::WindowComponent>();
            add_component(window); // function inherited from Ak::Application
            window->title = "Rectangle using Akel Engine";
            window->resizable = true;
            window->vsync = false;
            window->size.SET(1280, 750);
            window->fetchSettings();

            add_component<FPSprinterComponent>();

            Ak::RendererComponent* renderer = Ak::memAlloc<Ak::RendererComponent>(window);

            Ak::Render_Core::get().getClearValue().color.float32[0] = 128 / 255;
            Ak::Render_Core::get().getClearValue().color.float32[1] = 175 / 255;
            Ak::Render_Core::get().getClearValue().color.float32[2] = 255 / 255;

			renderer->loadCustomShader(vertex_shader);
			renderer->loadCustomShader(fragment_shader);

            Ak::Entity2D rectangle(Models::quad, { 50.0f, 50.0f }, { 250.0f, 200.0f }, Colors::red);
            renderer->add_entity(rectangle);

            add_component(renderer);
        }
        ~Rect() = default;
};

Ak::AkelInstance Akel_init()
{
    Ak::AkelInstance instance;
        instance.project_file_path = Ak::Core::getMainDirPath() + "../../SandBox/rect";
        instance.project_file_name = "rect";
        instance.memory_manager_enable_fixed_allocator = false;
    return instance;    
}

Ak::Application* Akel_mainApplication()
{
	return Ak::memAlloc<Rect>();
}
